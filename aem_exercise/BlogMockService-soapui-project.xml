<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="4b937212-7602-4f53-8901-680aadf88ec9" activeEnvironment="Default" name="BlogMockService" resourceRoot="" soapui-version="5.2.1" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="69644537-286a-4cf4-8e8b-7bf95bcd9854" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://BlogMockServices.com" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://BLRRSHIV266310:8089/</con:endpoint><con:endpoint>http://BlogMockServices.com</con:endpoint></con:endpoints><con:resource name="Comments" path="/MockServices/mock/comments" id="05fb0674-b4cf-4497-b5ca-ef2015c8aaaa"><con:settings/><con:parameters/><con:method name="Comments" id="a96d3819-0093-4a1b-ac58-bd2320348afb" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="1deecacc-d5ec-4925-95d8-34374dc7e2a5" mediaType="application/json"><con:settings/><con:endpoint>http://BlogMockServices.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="blogs" path="/MockServices/mock/blogs" id="c51cd345-2194-4b31-969f-33bc0d810850"><con:settings/><con:parameters/><con:method name="Method 1" id="fffd5573-d43c-4fb9-91d3-5bdd40dd7001" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="92b8cbc7-216f-44b2-934a-a189e90a1fa8" mediaType="application/json"><con:settings/><con:endpoint>http://BlogMockServices.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="12ee6ce8-8b13-4372-9a63-273ad1d5937f" port="8091" path="/" host="BLRRSHIV266310" name="BlogMockService" docroot=""><con:settings/><con:properties/><con:restMockAction name="/MockServices/mock/comments" method="GET" resourcePath="/MockServices/mock/comments" id="8b4be163-7259-45a2-b8c8-d212b5bef143"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="875c03ea-8d6a-4660-aa19-913ca383ea61" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "commentsList": [
  	{
      "commentId": "2222",
      "comment": "B. This is the second comment",
      "commenterName": "Ravi2"
    },
    {
      "commentId": "3333",
      "comment": "C.This is the third comment",
      "commenterName": "Kumar"
    },
    
    {
      "commentId": "1111",
      "comment": "A. This is the first comment",
      "commenterName": "Ankit"
    }
  ]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/MockServices/mock/blogs" method="GET" resourcePath="/MockServices/mock/blogs" id="22a36652-b1e6-4d23-8435-e092580116c4"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="fe77d573-b169-47d5-b654-e39fabb3fd1c" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/></con:soapui-project>